// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hunspell.proto

package main

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HunspellRequest struct {
	Word                 string   `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HunspellRequest) Reset()         { *m = HunspellRequest{} }
func (m *HunspellRequest) String() string { return proto.CompactTextString(m) }
func (*HunspellRequest) ProtoMessage()    {}
func (*HunspellRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_58a81579c198a196, []int{0}
}

func (m *HunspellRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HunspellRequest.Unmarshal(m, b)
}
func (m *HunspellRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HunspellRequest.Marshal(b, m, deterministic)
}
func (m *HunspellRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HunspellRequest.Merge(m, src)
}
func (m *HunspellRequest) XXX_Size() int {
	return xxx_messageInfo_HunspellRequest.Size(m)
}
func (m *HunspellRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HunspellRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HunspellRequest proto.InternalMessageInfo

func (m *HunspellRequest) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

type HunspellReply struct {
	WordList             []string `protobuf:"bytes,1,rep,name=wordList,proto3" json:"wordList,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HunspellReply) Reset()         { *m = HunspellReply{} }
func (m *HunspellReply) String() string { return proto.CompactTextString(m) }
func (*HunspellReply) ProtoMessage()    {}
func (*HunspellReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_58a81579c198a196, []int{1}
}

func (m *HunspellReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HunspellReply.Unmarshal(m, b)
}
func (m *HunspellReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HunspellReply.Marshal(b, m, deterministic)
}
func (m *HunspellReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HunspellReply.Merge(m, src)
}
func (m *HunspellReply) XXX_Size() int {
	return xxx_messageInfo_HunspellReply.Size(m)
}
func (m *HunspellReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HunspellReply.DiscardUnknown(m)
}

var xxx_messageInfo_HunspellReply proto.InternalMessageInfo

func (m *HunspellReply) GetWordList() []string {
	if m != nil {
		return m.WordList
	}
	return nil
}

func init() {
	proto.RegisterType((*HunspellRequest)(nil), "main.HunspellRequest")
	proto.RegisterType((*HunspellReply)(nil), "main.HunspellReply")
}

func init() { proto.RegisterFile("hunspell.proto", fileDescriptor_58a81579c198a196) }

var fileDescriptor_58a81579c198a196 = []byte{
	// 162 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0x28, 0xcd, 0x2b,
	0x2e, 0x48, 0xcd, 0xc9, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9, 0x4d, 0xcc, 0xcc,
	0x53, 0x52, 0xe5, 0xe2, 0xf7, 0x80, 0x8a, 0x07, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x09,
	0x71, 0xb1, 0x94, 0xe7, 0x17, 0xa5, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x4a,
	0xda, 0x5c, 0xbc, 0x08, 0x65, 0x05, 0x39, 0x95, 0x42, 0x52, 0x5c, 0x1c, 0x20, 0x09, 0x9f, 0xcc,
	0xe2, 0x12, 0x09, 0x46, 0x05, 0x66, 0x0d, 0xce, 0x20, 0x38, 0xdf, 0xa8, 0x81, 0x91, 0x8b, 0x03,
	0xa6, 0x5a, 0xc8, 0x82, 0x8b, 0x23, 0xb8, 0x24, 0x35, 0x37, 0x3c, 0xbf, 0x28, 0x45, 0x48, 0x54,
	0x0f, 0x64, 0xa7, 0x1e, 0x9a, 0x85, 0x52, 0xc2, 0xe8, 0xc2, 0x05, 0x39, 0x95, 0x4a, 0x0c, 0x42,
	0x56, 0x5c, 0x5c, 0xc1, 0xa5, 0xe9, 0xe9, 0xa9, 0xc5, 0x25, 0x99, 0xf9, 0x79, 0xa4, 0xe9, 0x4d,
	0x62, 0x03, 0xfb, 0xd1, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x82, 0x07, 0x17, 0xf5, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HunspellClient is the client API for Hunspell service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HunspellClient interface {
	StemWord(ctx context.Context, in *HunspellRequest, opts ...grpc.CallOption) (*HunspellReply, error)
	Suggestion(ctx context.Context, in *HunspellRequest, opts ...grpc.CallOption) (*HunspellReply, error)
}

type hunspellClient struct {
	cc *grpc.ClientConn
}

func NewHunspellClient(cc *grpc.ClientConn) HunspellClient {
	return &hunspellClient{cc}
}

func (c *hunspellClient) StemWord(ctx context.Context, in *HunspellRequest, opts ...grpc.CallOption) (*HunspellReply, error) {
	out := new(HunspellReply)
	err := c.cc.Invoke(ctx, "/main.Hunspell/StemWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hunspellClient) Suggestion(ctx context.Context, in *HunspellRequest, opts ...grpc.CallOption) (*HunspellReply, error) {
	out := new(HunspellReply)
	err := c.cc.Invoke(ctx, "/main.Hunspell/Suggestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HunspellServer is the server API for Hunspell service.
type HunspellServer interface {
	StemWord(context.Context, *HunspellRequest) (*HunspellReply, error)
	Suggestion(context.Context, *HunspellRequest) (*HunspellReply, error)
}

// UnimplementedHunspellServer can be embedded to have forward compatible implementations.
type UnimplementedHunspellServer struct {
}

func (*UnimplementedHunspellServer) StemWord(ctx context.Context, req *HunspellRequest) (*HunspellReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StemWord not implemented")
}
func (*UnimplementedHunspellServer) Suggestion(ctx context.Context, req *HunspellRequest) (*HunspellReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Suggestion not implemented")
}

func RegisterHunspellServer(s *grpc.Server, srv HunspellServer) {
	s.RegisterService(&_Hunspell_serviceDesc, srv)
}

func _Hunspell_StemWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HunspellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HunspellServer).StemWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Hunspell/StemWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HunspellServer).StemWord(ctx, req.(*HunspellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hunspell_Suggestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HunspellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HunspellServer).Suggestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Hunspell/Suggestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HunspellServer).Suggestion(ctx, req.(*HunspellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hunspell_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.Hunspell",
	HandlerType: (*HunspellServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StemWord",
			Handler:    _Hunspell_StemWord_Handler,
		},
		{
			MethodName: "Suggestion",
			Handler:    _Hunspell_Suggestion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hunspell.proto",
}
